#+TITLE:       LeetCode题解
#+AUTHOR:      ShengLi
#+EMAIL:       qcl6355@gmail.com
#+DATE:        2016-03-26 Sat
#+URI:         /blog/%y/%m/%d/leetcode题解
#+KEYWORDS:    <TODO: insert your keywords here>
#+TAGS:        LeetCode, Java, Algorithm
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 个人LeetCode题解

* Two Sum
#+BEGIN_QUOTE
Given an array of integers, find two numbers such that they add up to
a specific target number.  The function twoSum should return indices
of the two numbers such that they add up to the target, where index1
must be less than index2. Please note that your returned answers (both
index1 and index2) are not zero-based.  You may assume that each input
would have exactly one solution.
Input: numbers={2, 7, 11, 15},target=9
Output: index1=1, index2=2
#+END_QUOTE

#+BEGIN_SRC java
  public int[] twoSum(int[] numbers, int target) {
      int res[] = new int[2];
      Map<Integer, Integer> numToIndex = new HashMap<Integer, Integer>();
      for (int i = 0; i < numbers.length; i++) {
          numToIndex.put(numbers[i], i);
      }

      for (int i = 0; i < numbers.length; i++) {
          int t = target - numbers[i];
          if (numToIndex.containsKey(t) && numToIndex.get(t) > i) {
              res[0] = i+1;
              res[1] = numToIndex.get(t);
              break;
          }
      }
      return res;
  }
#+END_SRC
