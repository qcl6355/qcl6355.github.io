#+TITLE:       LeetCode题解
#+AUTHOR:      ShengLi
#+EMAIL:       qcl6355@gmail.com
#+DATE:        2016-03-26 Sat
#+URI:         /wiki/%y/%m/%d/leetcode题解
#+KEYWORDS:    LeetCode,Java,Algorithm
#+TAGS:        LeetCode,Java,Algorithm
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Sheng Li's LeetCode题解

* Two Sum
#+BEGIN_QUOTE
Given an array of integers, find two numbers such that they add up to
a specific target number.  The function twoSum should return
indices of the two numbers such that they add up to the target,
where index1 must be less than index2. Please note that your
returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9

Output: index1=1, index2=2
#+END_QUOTE

#+BEGIN_SRC java
  public int[] twoSum(int[] numbers, int target) {
      int res[] = new int[2];
      Map<Integer, Integer> numToIndex = new HashMap<Integer, Integer>();
      for (int i = 0; i < numbers.length; i++) {
          numToIndex.put(numbers[i], i);
      }

      for (int i = 0; i < numbers.length; i++) {
          int t = target - numbers[i];
          if (numToIndex.containsKey(t) && numToIndex.get(t) > i) {
              res[0] = i+1;
              res[1] = numToIndex.get(t);
              break;
          }
      }
      return res;
  }
#+END_SRC
* Find Median
#+BEGIN_QUOTE
There are two sorted arrays A and B of size m and n respectively.
Find the median of the two sorted arrays. The overall run time
complexity should be O(log (m+n)).
#+END_QUOTE

#+BEGIN_SRC java
  public double findMedianSortedArrays(int A[], int B[] ) {
      int m = A.length;
      int n = B.length;
      if ((m+n) % 2 != 0){
          return findKth(A, 0, B, 0, (m+n)/2 + 1);
      } else {
          return (findKth(A, 0, B, 0, (m+n)/2 + 1) + findKth(A, 0, B, 0, (m+n)/2)) / 2.0;
      }
  }

  private int findKth(int A[], int sa, int B[], int sb, int k){
      int m = A.length - sa;
      int n = B.length - sb;

      if (m > n) return findKth(B, sb, A, sa, k);
      if (m == 0) return B[sb + k - 1];
      if (k == 1) return Math.min(A[sa], B[sb]);

      int ia = Math.min(k/2, m);
      int ib = k - ia;

      if (A[sa + ia - 1] == B[sb + ib - 1]){
          return A[sa + ia - 1];
      } else if (A[sa + ia - 1] > B[sb + ib - 1]){
          return findKth(A, sa, B, sb + ib, k - ib);
      } else {
          return findKth(A, sa + ia, B, sb, k - ia);
      }
  }
#+END_SRC
